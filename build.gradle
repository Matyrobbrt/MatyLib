import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

buildscript {
    repositories {
       	maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
    	classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
	id 'org.cadixdev.licenser' version '0.6.1'
	id("maven-publish")
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.71.4'
}


apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${version}"
group = 'com.matyrobbrt.lib'
archivesBaseName = "${mod_id}-${mc_version}"

def props = new Properties()
file(".env").withInputStream { props.load(it) }

sourceSets {
	main {
		java {
			srcDirs = [
				"$rootDir/src/main/java"
			]
		}
		resources {
			srcDirs = [
				"$rootDir/src/main/resources",
				"$rootDir/src/generated/resources"
			]
			exclude '.cache'
		}
	}
        
	test {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
	
		java {
			srcDirs = [
				"$rootDir/src/test/java"
			]
		}
		resources {
			srcDirs = [
				"$rootDir/src/test/resources"
			]
		}
	}
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8) 
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: '2021.10.17-1.16.5'
    
    runs {
        client {
            workingDirectory project.file('run/client')

            mods {
                matylib {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            mods {
                matylib {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/data')

            args '--mod', 'matylib', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                matylib {
                    source sourceSets.main
                }
            }
        }
        
        test {
        	parent runs.client
            workingDirectory project.file('run/test')
			
			environment 'MOD_CLASSES', 'dummy'

            main 'net.minecraftforge.userdev.LaunchTesting'

            mods {
           		tests {
           			source sourceSets.main
           			source sourceSets.test
           		}
            }
        }
    }
}

license {
	header = file("$rootDir/header.txt")
	properties {
        name = 'Matyrobbrt'
        year = 2021
    }

	include '**/*.java'
	
	style {
    	java = 'JAVADOC'
    }

    tasks {
    	main {
    		files.from files("$rootDir/src/main/java")
    	}
    	test {
    		files.from files("$rootDir/src/test/java")
    	}
    }
}


def replaceResources = tasks.register("replaceResources", Copy) {
	it.outputs.upToDateWhen { false }
	//Copy it into the build dir
	it.from(sourceSets.main.resources) {
		include "META-INF/mods.toml"
		expand 'version': version
	}
	it.into "$buildDir/resources/main/"
}

classes.configure {
	dependsOn(replaceResources)
}

processResources {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	exclude('META-INF/mods.toml')
	configure { finalizedBy(replaceResources) }
}

javadoc {
	source = [sourceSets.main.allJava]
	// prevent java 8's strict doclint for javadocs from failing builds
	options.addStringOption('Xdoclint:none', '-quiet')
}

task makeChangelog(type: GitChangelogTask) {
	fromRepo = file("$projectDir")
	file = file('changelog.html')
	untaggedName = "Current release ${version}"
	fromCommit = '03371f82fa69785720a3ee4455278c33de38e494'
	toRef = '1.16.5'
	templateContent = file('changelog.mustache').getText('UTF-8')
}

curseforge {
	apiKey = props.getProperty('CURSEFORGE_KEY')
	project {
		id = "${curse_project_id}"
		changelog = file('changelog.html')
		changelogType = 'html'
		releaseType = 'release'
		addGameVersion "${mc_version}"
	}
}

afterEvaluate {
	tasks.curseforge551821.dependsOn makeChangelog
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.19'
}

jar {
    manifest {
        attributes([
            "Specification-Title": "matylib",
            "Specification-Vendor": "matyrobbrt",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"matyrobbrt",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.dependsOn(replaceResources)

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
	archives jar
	archives javadocJar
	archives sourcesJar
}

jar.finalizedBy('reobfJar') 

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${mod_id}-${mc_version}"
            groupId = "com.matyrobbrt"
            artifacts = [jar, javadocJar, sourcesJar]
        }
    }
    repositories {
        /**maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Matyrobbrt/MatyLib")
            credentials {
				username = project.findProperty("gpr.user") ?: props.getProperty("GITHUB_USERNAME")
            	password = project.findProperty("gpr.key") ?: props.getProperty("GITHUB_TOKEN")
            }
        }**/
        maven {
	      name = "cloudsmith"
	      url = "https://maven.cloudsmith.io/matyrobbrt/matylib/"
	      credentials {
                username = props.getProperty("CLOUD_USERNAME")
                password = props.getProperty("CLOUD_PASSWORD")
		}
	}
    }
}
